openapi: 3.1.0
info:
  title: API-server
  description: |-
    List of resources and paths for the Six Cities Project
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: offers
  - name: users
  - name: comments

paths:
  /users/register:
    post:
      tags:
        - users
      summary: User registration
      description: Registers a new user.
      requestBody:
        description: Information to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        '201':
          description: User has been registered. User object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '403':
          description: A logged in user can not register.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '409':
          description: A user with this email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /users/login:
    post:
      tags:
        - users
      summary: User authorization
      description: Authorizes an existing user based on login and password.
      requestBody:
        description: Information to authorize an existing user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        '200':
          description: A user has been authorized. User data with token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedUser'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: A user is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '404':
          description: A user with specified credentials was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

    get:
      tags:
        - users
      summary: User authorization state
      description: Returns authorized user's information.
      responses:
        '200':
          description: User token is valid. Logged user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedUser'
        '401':
          description: User token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /users/avatar:
    post:
      tags:
        - users
      summary: Upload avatar image
      description: Uploads user's avatar. Avatar image should have a `png` or `jpg` format.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image has been uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  filepath:
                    type: string
                    example:
                      http://mysite.com/upload/Uq-PzHXRZnm6NzYvfjFGA.png
        '401':
          description: A user is not authorized to upload an avatar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers:
    get:
      tags:
        - offers
      summary: List of offers
      description: Returns a list of offers.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            required: false
            description: Amount of offers to get
      responses:
        '200':
          description: List of offers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerPreview'

    post:
      tags:
        - offers
      summary: Offer creation
      description: Creates a new offer.
      requestBody:
        description: Information to create a new offer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true
      responses:
        '201':
          description: Offer has been created. Offer object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: User is not authorized to create offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/favorites:
    get:
      tags:
        - offers
      summary: List of favorite offers
      description: Returns all the offers that have been added to favorites list by a current user.
      responses:
        '200':
          description: List of offers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerPreview'
        '401':
          description: User is not authorized to view favorite offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/premium:
    get:
      tags:
        - offers
      summary: List of premium offers
      description: Returns a list of premium offers for a given city.
      parameters:
        - in: query
          name: city
          schema:
            type: string
            required: true
            description: The city to get the premium offers for.
      responses:
        '200':
          description: List of premium offers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerPreview'
        '400':
          description: city is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Detailed offer information
      description: Returns a full description of an offer.
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            required: true
            description: The ID of the offer.
      responses:
        '200':
          description: Detailed offer information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '404':
          description: Offer with the given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

    patch:
      tags:
        - offers
      summary: Offer edit
      description: Updates an offer.
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            required: true
            description: The ID of the offer.
      requestBody:
        description: Information in the offer to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOffer'
        required: true
      responses:
        '200':
          description: Offer has been successfully updated. Updated offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: User is not authorized to edit offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '403':
          description: User is not authorized to edit this offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '404':
          description: Offer with the given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

    delete:
      tags:
        - offers
      summary: Offer deletion
      description: Deletes an offer.
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            required: true
            description: The ID of the offer.
      responses:
        '204':
          description: Offer has been successfully removed.
        '400':
          description: offerId is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: User is not authorized to delete offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '403':
          description: User is not authorized to delete this offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '404':
          description: Offer with the given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/{offerId}/comments:
    get:
      tags:
        - offers
      summary: List of comments
      description: Returns a list of last comments for a given offer.
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
            required: true
            description: The ID of the offer.
      responses:
        '200':
          description: List of comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
        '400':
          description: offerId is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '404':
          description: Offer with the given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/{offerId}/preview:
    post:
      tags:
        - offers
      summary: Upload offer preview image
      description: Uploads preview image. Image should have a `png` or `jpg` format.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                preview:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image has been uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  imagePreview:
                    type: string
                    example: http://mysite.com/upload/Uq-PzHXRZnm6NzYvfjFGA.png
        '401':
          description: A user is not authorized to upload images.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/{offerId}/images:
    post:
      tags:
        - offers
      summary: Upload offer images
      description: Uploads images describing the property. Images should have a `png` or `jpg` format.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Images have been uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: string
                      example: http://mysite.com/upload/Uq-PzHXRZnm6NzYvfjFGA.png
        '401':
          description: A user is not authorized to upload images.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /offers/{offerId}/favorite:
    put:
      tags:
        - offers
      summary: Favorite the offer
      description: Adds/removes an offer to/from the favorites list.
      requestBody:
        description: Information to mark an offer as favorite.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/favoriteOffer'
      responses:
        '204':
          description: Offer's `favorite` status has been successfully updated
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: User is not authorized to favorite offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

  /comments:
    post:
      tags:
        - comments
      summary: Comment creation
      description: Adds a comments to a given offer.
      requestBody:
        description: Information to create a new comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true
      responses:
        '201':
          description: Comments has been created. Comment object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Some of the provided information is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
        '401':
          description: User is not authorized to add comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'
        '404':
          description: Offer with the given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalError'

components:
  schemas:
    generalError:
      type: object
      properties:
        error:
          type: string
          description: A description of the error.
          example: Offer with id _ not found.
        errorType:
          type: string
          description: A type of the error.
          example: COMMON_ERROR

    validationError:
      type: object
      properties:
        error:
          type: string
          description: A description of the error.
          example: Validation error
        errorType:
          type: string
          description: A type of the error.
          example: VALIDATION_ERROR
        details:
          type: array
          items:
            type: object
            properties:
              property:
                type: string
                description: The name of the property that failed validation.
                example: price
              messages:
                type: array
                items:
                  type: string
                  description: The constraint.
                  example: Minimum price is 100

    createUser:
      type: object
      properties:
        email:
          type: string
          format: email
          required: true
          example: keks@htmlacademy.ru
        name:
          type: string
          required: true
          example: Keks
        password:
          type: string
          format: password
          required: true
          example: 12345678
        type:
          $ref: '#/components/schemas/userType'

    loginUser:
      type: object
      properties:
        login:
          type: string
          required: true
          example: keks@htmlacademy.ru
        password:
          type: string
          required: true
          example: 12345678

    loggedUser:
      type: object
      properties:
        token:
          type: string
          example: long-token-string
        email:
          type: string
          example: keks@htmlacademy.ru
        avatarPath:
          type: string
          example: upload/ketUeXWH-AxExEduf3lSp.png
        name:
          type: string
          example: Keks
        type:
          $ref: '#/components/schemas/userType'

    user:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        email:
          type: string
          example: keks@htmlacademy.ru
        avatarPath:
          type: string
          example: upload/ketUeXWH-AxExEduf3lSp.png
        name:
          type: string
          example: Keks
        type:
          $ref: '#/components/schemas/userType'

    favoriteOffer:
      type: object
      properties:
        isFavorite:
          type: boolean
          required: true
          example: true

    createOffer:
      type: object
      properties:
        title:
          type: string
          required: true
          example: Beautiful & luxurious studio at great location
        description:
          type: string
          required: true
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        postDate:
          type: string
          format: date-time
          required: true
          example: "2023-01-30T08:30:00Z"
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
            example: https://s3.amasonaws.com/full-image.png
          required: true
        isPremium:
          type: boolean
          required: true
          example: true
        housingType:
          $ref: '#/components/schemas/housingType'
        roomAmount:
          type: integer
          required: true
          example: 3
        guestAmount:
          type: integer
          required: true
          example: 5
        price:
          type: number
          format: float
          required: true
          example: 100
        amenities:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - AirConditioning
              - LaptopFriendlyWorkspace
              - BabySeat
              - Washer
              - Towels
              - Fridge
            example: Fridge
          required: true
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 48.85661
            longitude:
              type: number
              format: float
              example: 2.351499
          required: true
        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          required: true
        city:
          type: string
          example: Hamburg
          required: true

    updateOffer:
      type: object
      properties:
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        description:
          type: string
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
            example: https://s3.amasonaws.com/full-image.png
        isPremium:
          type: boolean
          example: true
        housingType:
          $ref: '#/components/schemas/housingType'
        roomAmount:
          type: integer
          example: 3
        guestAmount:
          type: integer
          example: 5
        price:
          type: number
          format: float
          example: 100
        amenities:
          $ref: '#/components/schemas/amenities'
        location:
          $ref: '#/components/schemas/location'
        city:
          $ref: '#/components/schemas/city'

    offer:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        description:
          type: string
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        postDate:
          type: string
          format: date-time
          example: 2023-10-11T13:15:56.868Z
        city:
          $ref: '#/components/schemas/city'
        imagePreview:
          type: string
          example: https://s3.amasonaws.com/image-preview.png
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
            example: https://s3.amasonaws.com/full-image.png
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          format: float
          example: 4.2
        housingType:
          $ref: '#/components/schemas/housingType'
        roomAmount:
          type: integer
          example: 3
        guestAmount:
          type: integer
          example: 5
        price:
          type: number
          format: float
          example: 100
        amenities:
          $ref: '#/components/schemas/amenities'
        location:
          $ref: '#/components/schemas/location'
        commentAmount:
          type: integer
          example: 5
        author:
          $ref: '#/components/schemas/user'

    offerPreview:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        housingType:
          $ref: '#/components/schemas/housingType'
        postDate:
          type: string
          format: date-time
          example: 2023-10-11T13:15:56.868Z
        city:
          $ref: '#/components/schemas/city'
        imagePreview:
          type: string
          example: https://s3.amasonaws.com/image-preview.png
        isPremium:
          type: boolean
          example: false
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          format: float
          example: 4.2
        price:
          type: number
          format: float
          example: 100
        commentAmount:
          type: integer
          example: 5
        location:
          $ref: '#/components/schemas/location'

    createComment:
      type: object
      properties:
        text:
          type: string
          required: true
        rating:
          type: integer
          example: 4
          required: true
        offerId:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          required: true

    comment:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        text:
          type: string
          example: Nice property!
        rating:
          type: integer
          example: 4
        postDate:
          type: string
          format: date-time
          example: 2023-10-11T13:15:56.868Z
        author:
          $ref: '#/components/schemas/user'

    amenities:
      type: array
      items:
        type: string
        enum:
          - Breakfast
          - AirConditioning
          - LaptopFriendlyWorkspace
          - BabySeat
          - Washer
          - Towels
          - Fridge
        example: Fridge

    housingType:
      type: string
      enum:
        - Apartment
        - House
        - Room
        - Hotel
      example: Apartment

    location:
      type: object
      properties:
        latitude:
          type: number
          format: float
          example: 48.85661
        longitude:
          type: number
          format: float
          example: 2.351499

    city:
      type: string
      example: Amsterdam

    userType:
      type: string
      enum:
        - Regular
        - Pro
      required: true
      example: Pro
